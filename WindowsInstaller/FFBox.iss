; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "FFBox"
#define MyAppVersion "4.3"
#define MyAppPublisher "滔滔清风"
#define MyAppURL "http://ttqf.tech"
; #define MyCopyright "版权所有"
#define MyAppPkgDir "../release/win-unpacked"
#define MyAppExeName "FFBoxHelper.exe"

; 安装包输出文件夹
#define MySetupOutDir "./output"
#define MySetupOutBaseFilename "Windows_x86-64_FFBox_4.3"

; 安装包所用的资源文件夹
#define MyResDir "./res"
; 在注册表上记录上一次安装的位置
; #define MyRegInstallPath_sk "Programs/FFBox"
; #define MyRegInstallPath_vn "installPath"
; 点击 license 打开的网页连接
#define MyAppLkLicenseURL 'http://ttqf.tech/LICENSE'
; 安装目录至少需要的空间
#define MyAppNeedSpaceByte 290000000
; 外部程序调用本安装程序时，会向外部传安装进度的 window api Message ID 
#define WM_MY_INSTALL_PROGRESS 6364

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{28A86B17-7509-4BB3-8748-A2D003A02084}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
; AppVerName 指示在控制面板中显示的程序名
AppVerName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}

; VersionInfoDescription 指示输出文件的“文件说明”
VersionInfoDescription={#MyAppName} 安装程序
VersionInfoCompany={#MyAppPublisher}
VersionInfoVersion={#MyAppVersion}
VersionInfoProductVersion={#MyAppVersion}
; VersionInfoCopyright={#MyCopyright}

DefaultDirName={pf}/{#MyAppName}
; DefaultGroupName={#MyAppName}
LicenseFile={#MyAppPkgDir}\LICENSE
OutputDir={#MySetupOutDir}
OutputBaseFilename={#MySetupOutBaseFilename}
SetupIconFile={#MyResDir}\..\..\config\256.ico
; ArchitecturesAllowed 指示安装包运行时检查系统的架构类型
ArchitecturesAllowed=x64compatible
; ArchitecturesInstallIn64BitMode 指示安装包本体的架构类型
ArchitecturesInstallIn64BitMode=x64compatible
Compression=lzma2/max
LZMANumBlockThreads=8
LZMAUseSeparateProcess=true
SolidCompression=false

UsePreviousAppDir=no
; PrivilegesRequired=admin 指示打开时即使用管理员权限
PrivilegesRequired=admin
PrivilegesRequiredOverridesAllowed=commandline

; 先让一些默认的界面不要显示
DisableReadyPage=yes
DisableWelcomePage=no
; DisableDirPage=no
; DisableProgramGroupPage=yes
; DirExistsWarning=yes

[Languages]
Name: "chs"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkablealone; 
; Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
; Name: "quicklaunchicon"; Description: "quicklaunchicon"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#MyResDir}\tmp\*"; DestDir: "{tmp}"; Flags: dontcopy solidbreak; Attribs: hidden system
Source: "{#MyAppPkgDir}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; Source: "..\..\test_prj\MyProg.exe"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; Source: compiler:InnoCallback.dll; DestDir: {tmp}; Flags: dontcopy

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
; Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}" 
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}";
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon;
; Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; AfterInstall: ShoutcutRunAsAdmin('{group}\{#MyAppName}.lnk');
; Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon ; AfterInstall: ShoutcutRunAsAdmin('{commondesktop}\{#MyAppName}.lnk');
; Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename:"{app}\{#MyAppExeName}"; Tasks: quicklaunchicon  ; AfterInstall: ShoutcutRunAsAdmin('{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}.lnk');
; Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\{#MyAppName}"; Filename:"{app}\{#MyAppExeName}"; Tasks: quicklaunchicon ; AfterInstall: ShoutcutRunAsAdmin('{userappdata}\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\{#MyAppName}.lnk');

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: runascurrentuser nowait postinstall skipifsilent

;[UninstallRun] 
;Filename: http://happyfish.lkgame.com/uninstallsurvey; Flags: shellexec runmaximized; Tasks: ; Languages:

[Registry]
; Root:HKCU;Subkey: "{#MyRegInstallPath_sk}" ; ValueType:string; ValueName:"{#MyRegInstallPath_vn}"; ValueData:"{app}";Flags:uninsdeletekeyifempty

[Code]
#include "DllsImport.iss"
#include "HoverEvent.iss"
#include "SetupMisc.iss"

var 
  g_notifyWnd : HWND;               // 发送通知的回调窗口
  g_notifyFinished : Boolean;       // 是否已经发送结束消息？

var 
  dNeedSpaceByte: Longint; // 需要的安装的空间大小，字节
  PBOldProc:Longint;
  imgBigIcon: Longint;
  btnClose, btnMin:HWND;

  DpiScalePctg: integer;
  
  // page welcome 
  btnOneKey: HWND;
  lblLicense, lblVersion: TLabel;
  lblSoftwareName: TLabel;
  imgLogo1, imgOneKeySh:Longint;

  // page select dir 
  btnSelectDir1:HWND;
  edtSelectDir1:TEdit;
  lblNeedSpace, lblDiskSpace,lblTipWDir :TLabel;
  
  // page install 
  imgProgressBar, imgProgressBarBg:Longint; //进度条
  lblTipProgress :TLabel;
 
  // page finish;
  btnFinish:HWND;

// // // // // // // // // // // // 功能函数 // // // // // // // // // // // //

// 修改快捷方式为以管理员身份运行
procedure ShoutcutRunAsAdmin(Filename:string);
var 
  Buffer:String;
  Stream:TStream;
begin
  Filename := ExpandConstant(Filename);
  //Log(Format('ShoutcutRunAsAdmin File=%s )',[Filename]))
  Stream:=TFileStream.Create(FileName,fmOpenReadWrite);
  try
    Stream.Seek(21,soFromBeginning);
    SetLength(Buffer, 1)
    Stream.ReadBuffer(Buffer,1);
    Buffer[1] := Chr(Ord(Buffer[1]) or $20);
    Stream.Seek(-1, soFromCurrent);
    Stream.WriteBuffer(Buffer, 1);
  finally
    Stream.Free;
  end;
end;

function DpiScale(v: integer): integer; begin
  Result := v * DpiScalePctg;
end;

function GetCmdlineParam(PName:String):String;
var
  CmdLine : String;
  CmdLineLen : Integer;
  i : Integer;
begin
  CmdLineLen:=ParamCount();
  for i:=0 to CmdLineLen do
  begin
  CmdLine:=ParamStr(i);
  if CmdLine= PName then
    begin
      CmdLine:=ParamStr(i+1);
      Result := CmdLine;
      Exit;
    end;
  end;
  Result := '0';
end;

procedure Notify_Init();
begin
     g_notifyWnd := FindWindowByWindowName(GetCmdlineParam('-notify_wnd'));
     g_notifyFinished := false;
end;

procedure Notify_DoNotifyProgress( pos, total: Longint);
begin 
   if g_notifyWnd <> 0 then
   begin 
      PostMessage(g_notifyWnd, {#WM_MY_INSTALL_PROGRESS}, pos, total );
   end;
end;

procedure Notify_DoNotifyFinish();
begin
   g_notifyFinished := true;
   if g_notifyWnd <> 0 then
   begin 
      PostMessage(g_notifyWnd, {#WM_MY_INSTALL_PROGRESS}, 10000, 9999);
   end;
end;

procedure TconSetVisible(lbl: TControl; bVis: boolean); begin
  if bVis then begin
    lbl.Show;
  end else begin
    lbl.Hide;
	end;
end;

// // // // // // // // // // // // 字符串 getter // // // // // // // // // // // //

function GetNeedSpaceText(): string;
var 
  iv: string;
begin 
  iv := Misc_FomatByteText(dNeedSpaceByte);
  result := format('所需外存空间：%s', [iv]);
end;

function GetCurDirFreeSpace(): double;
var
 curPath:string;
 FreeSpace, TotalSpace:Cardinal;
begin
  curPath := edtSelectDir1.Text;
  GetSpaceOnDisk(ExtractFileDrive(curPath),True,FreeSpace,TotalSpace);
  result := FreeSpace * 1024.0 * 1024;
end;

function GetDiskSpaceText(FreeSpace: double):string;
var 
  iv: string;
begin 
  iv := Misc_FomatByteText_Double(FreeSpace);
  result := format('可用外存空间：%s', [iv]);
end;

// // // // // // // // // // // // 事件响应 // // // // // // // // // // // //

procedure BtnClose_OnClick(hBtn:HWND); begin
  WizardForm.Release;
  WizardForm.Close;
  // stop and rollback actions you did from your after install process and kill the setup process itself
  ExitProcess(0);
end;

procedure btnMin_OnClick(hBtn:HWND);
begin
  SendMessage(WizardForm.Handle,WM_SYSCOMMAND,61472,0);
end;

procedure lblLicenseClick(sender :TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', '{#MyAppLkLicenseURL}', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);  
end; 

procedure lblVersionClick(sender :TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('open', '{#MyAppURL}', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);  
end; 

// 朕已阅，安装
procedure btnOneKey_OnClick(hBtn:HWND);
var 
  FreeSpace: double; 
begin
  //检查一下有否有空间
  FreeSpace := GetCurDirFreeSpace();
  if FreeSpace <= 0 then begin 
    msgbox('该目录为无效路径，请重新选择其他路径', mbInformation,MB_OK);
    exit;
  end;
  // Log(Format('FreeSpace %d, Need:%d', [FreeSpace, dNeedSpaceByte] ));
  if FreeSpace < dNeedSpaceByte then begin
    msgbox('该目录所在外存空间不足，请重新选择其他路径', mbInformation,MB_OK);
    exit;
  end;
  WizardForm.NextButton.OnClick(WizardForm);
end;

// FFBox，启动！
procedure btnFinish_OnClick(hBtn:HWND); begin
  WizardForm.NextButton.OnClick(WizardForm);
end;

procedure OnHoverControlChanged(Control: TControl);
begin
  lblLicense.Font.Style := lblLicense.Font.Style - [fsUnderline];
  lblVersion.Font.Style := lblVersion.Font.Style - [fsUnderline];
  if lblLicense = Control then begin
    lblLicense.Font.Style := lblLicense.Font.Style + [fsUnderline];
  end else if lblVersion = Control then begin
    lblVersion.Font.Style := lblVersion.Font.Style + [fsUnderline];
  end;
end;

procedure WhenInstallDirChangeCheckDiskSpace();
var 
  FreeSpace: double; 
begin
  FreeSpace := GetCurDirFreeSpace();
  lblNeedSpace.Caption := GetNeedSpaceText();
  lblDiskSpace.Caption := GetDiskSpaceText(FreeSpace);
  // TconSetVisible(lblTipWDir, (WizardForm.CurPageID = wpWelcome) and (FreeSpace <= 0) );
end;

procedure EdtSelectDir1_EditChanged(Sender: TObject);
begin
  WizardForm.DirEdit.Text:=edtSelectDir1.Text;
  WhenInstallDirChangeCheckDiskSpace();
end;

procedure BtnSelectDir1_OnClick(hBtn:HWND);
begin
  WizardForm.DirBrowseButton.OnClick(WizardForm);
  edtSelectDir1.Text:=WizardForm.DirEdit.Text;
  WhenInstallDirChangeCheckDiskSpace();
end;

// // // // // // // // // // // // 初始化 GUI // // // // // // // // // // // //

procedure InitGui_PageWelcome();
var
  BtnOneKeyFont:TFont;
  tmpFont:TFont;
begin
  btnOneKey:=BtnCreate(WizardForm.Handle,DpiScale(230),DpiScale(172),DpiScale(180), DpiScale(50), ExpandConstant('{tmp}\InstallBtn.png'),1,False)
  // BtnSetText(btnOneKey, '安装');
  BtnOneKeyFont := TFont.Create;
  with BtnOneKeyFont do begin 
    Size := 16;
    Name :='黑体';
    Color:=$ffffff;
  end;
  BtnSetFont(btnOneKey, BtnOneKeyFont.Handle);
  BtnSetFontColor(btnOneKey,$FAFAFA,$FFFFFF,$FFFFFF,$FFFFFF);
  BtnSetEvent(btnOneKey,BtnClickEventID,WrapBtnCallback(@btnOneKey_OnClick,1));

  // 选择目录输入框
  edtSelectDir1 := TEdit.Create(WizardForm);
  with edtSelectDir1 do
  begin
    Parent:= WizardForm;
    Text := WizardForm.DirEdit.Text;
    Font.Size:= 12
    Font.Color:=$555555
    Font.Name:='Calibri';
    Left:= DpiScale(120);
    Top := DpiScale(230);
    Width:= DpiScale(320);
    Height:= DpiScale(28);
    // BorderStyle:=bsNone;
    // TabStop := false;
    OnChange:=@EdtSelectDir1_EditChanged;
  end;

  // 选择目录按钮
  btnSelectDir1:=BtnCreate(WizardForm.Handle,DpiScale(440),DpiScale(216),DpiScale(90), DpiScale(50), ExpandConstant('{tmp}\BrowseBtn.png'), 1, False)
  BtnSetEvent(btnSelectDir1,BtnClickEventID,WrapBtnCallback(@BtnSelectDir1_OnClick,1));
  // BtnSetText(btnSelectDir1, '浏览');
  tmpFont := TFont.Create;
  with tmpFont do begin 
    Size := 12;
    Name :='黑体';
    Color:=$986800;
  end;
  BtnSetFont(btnSelectDir1, tmpFont.Handle);
  BtnSetFontColor(btnSelectDir1,$986800,$986800,$986800,$AFAFAF);

  // 所需空间
  lblNeedSpace := TLabel.Create(WizardForm);
  with lblNeedSpace do begin
    Parent := WizardForm;
    Caption := '';
    Transparent := true;
    Font.Size:= 9
    Font.Name:='微软雅黑'
    Font.Color:=$666666
    Left := DpiScale(120);
    Top := DpiScale(256);
  end;

  lblDiskSpace := TLabel.Create(WizardForm);
  with lblDiskSpace do begin
    Parent := WizardForm;
    Caption := '';
    Transparent := true;
    Font.Size:= 9
    Font.Name:='微软雅黑'
    Font.Color:=$666666
    Left := DpiScale(280);
    Top := DpiScale(256);
  end;
  
  // lblTipWDir := TLabel.Create(WizardForm);
  // with lblTipWDir do
  // begin
  //   Parent := WizardForm;
  //   Caption := '该目录为无效路径，请重新选择其他路径';
  //   Transparent := true;
  //   Font.Size:= 9
  //   Font.Name:='微软雅黑'
  //   Font.Color:=$6666ee
  //   Left := DpiScale(120);
  //   Top := DpiScale(270);
  // end;
  WhenInstallDirChangeCheckDiskSpace();

end;

procedure PageInstall_SetProgress(progress: Double);
var 
  w: Integer;
begin
  w := Round(640 * progress);
  ImgSetPosition(imgProgressBar, DpiScale(0), DpiScale(276), DpiScale(w), DpiScale(6));
  ImgSetVisiblePart(imgProgressBar, 0, 0, w * 3, 12);
  ImgApplyChanges(WizardForm.Handle);
  lblTipProgress.Caption := Format('%d %%', [Round(progress * 100)]);
end;

procedure InitGui_PageInstall();
var
  tmpFont:TFont;
begin
  // imgProgressBarBg:=ImgLoad(WizardForm.Handle,ExpandConstant('{tmp}\progressBg.png'), 0,0,0,0,True,True);
  // ImgSetPosition(imgProgressBarBg, DpiScale(38), DpiScale(429), DpiScale(577),DpiScale(19));
  imgProgressBar:=ImgLoad(WizardForm.Handle,ExpandConstant('{tmp}\progress.png'),0,0,0,0,True,True);
  
  lblTipProgress := TLabel.Create(WizardForm);
  with lblTipProgress do
  begin
    Parent := WizardForm;
    Caption := '';
    Alignment := taRightJustify;
    Transparent := true;
    Font.Size := 30;
    Font.Name := 'Bahnschrift';
    Font.Color := $333333;
    Left := DpiScale(320-30);
    Top := DpiScale(188);
    // AutoSize := True;
    Width := DpiScale(70);
  end;
end;

procedure InitGui_PageFinish();
var
   tmpFont:TFont;
begin 
  btnFinish := BtnCreate(WizardForm.Handle, DpiScale(230), DpiScale(192), DpiScale(180), DpiScale(50), ExpandConstant('{tmp}\FinishBtn.png'), 1, False);
  // BtnSetText(btnFinish, 'FFBox，启动！');
  tmpFont := TFont.Create;
  with tmpFont do begin 
    Size := 20;
    Name:='黑体';
    Color:=$000000;
  end;
  BtnSetFont(btnFinish, tmpFont.Handle);
  BtnSetFontColor(btnFinish,$FAFAFA,$FFFFFF,$FFFFFF,$FFFFFF);
  BtnSetEvent(btnFinish,BtnClickEventID,WrapBtnCallback(@btnFinish_OnClick,1));
end;

// procedure SetTaskValueByDesc(desc:string; value:boolean);
// var tmpInx:integer;
// begin 
//     tmpInx := WizardForm.TasksList.Items.IndexOf(desc);
//     if tmpInx <> -1 then begin
//       Log(Format('CurPageID = wpInstalling | set quicklaunchicon = %d ', [ value ] ));
//       WizardForm.TasksList.Checked[tmpInx] := value; 
//     end;
// end;

// 页面发生变化
procedure CurPageChanged(CurPageID: Integer);
var 
  isWpWelcome,isWpSelectDir,isWpInstalling,isWpFinished : boolean;
  nErrCode:integer; 
  i:integer;
begin
  Log(format( 'CurPageID id = %d',[ CurPageID ]));
  isWpWelcome    := CurPageID = wpWelcome;
  // isWpSelectDir  := CurPageID = wpSelectDir;
  isWpInstalling := CurPageID = wpInstalling;
  isWpFinished   := CurPageID = wpFinished;
  
  BtnSetEnabled(btnClose, isWpWelcome or isWpFinished);

  BtnSetVisibility(btnOneKey,       isWpWelcome);
  // ImgSetVisibility(imgBigIcon1,     isWpWelcome);
  ImgSetVisibility(imgOneKeySh,     isWpWelcome);
  
  // ImgSetVisibility(imgLogo1, isWpWelcome or isWpSelectDir);
  
  TconSetVisible(edtSelectDir1,   isWpWelcome);
  TconSetVisible(lblNeedSpace,    isWpWelcome);
  TconSetVisible(lblDiskSpace,    isWpWelcome);
  // TconSetVisible(lblTipWDir,      false);
  BtnSetVisibility(btnSelectDir1, isWpWelcome);
  
  ImgSetVisibility(imgProgressBar,   isWpInstalling);
  // ImgSetVisibility(imgProgressBarBg, isWpInstalling);
  TconSetVisible(lblTipProgress,     isWpInstalling);
  
  BtnSetVisibility(btnFinish, isWpFinished);

  if CurPageID = wpSelectDir then
  begin
    //Log('CurPageID = wpSelectDir');
    //Log(WizardForm.DiskSpaceLabel.Caption);
	  edtSelectDir1.Text:=WizardForm.DirEdit.Text;
    //Misc_SetTEdit_TextVCenter(edtSelectDir1);
    WhenInstallDirChangeCheckDiskSpace();
    //WizardForm.DiskSpaceLabel.Visible:=True;
  end;

  if isWpInstalling then begin
    // SetTaskValueByDesc('quicklaunchicon', isSelectedQuickLaunch);
 
    Notify_Init();
  end;
  
  if isWpFinished then
  begin
    //Log('CurPageID = wpFinished');

    ShellExec('taskbarpin', '{app}\{#MyAppExeName}', '', '', SW_SHOWNORMAL, ewNoWait, nErrCode);
    Notify_DoNotifyFinish();
  end;
 
  ImgApplyChanges(WizardForm.Handle);
end;

function PBProc(h:hWnd;Msg,wParam,lParam:Longint): Longint;
var
  pos,total: Longint;
  progress: Double;
begin
  Result:=CallWindowProc(PBOldProc,h,Msg,wParam,lParam);
  if (Msg=$402) and (WizardForm.ProgressGauge.Position>WizardForm.ProgressGauge.Min) then
  begin
    pos := WizardForm.ProgressGauge.Position - WizardForm.ProgressGauge.Min;
    total := WizardForm.ProgressGauge.Max - WizardForm.ProgressGauge.Min;
    progress := pos * 1.0 / total;
    PageInstall_SetProgress(progress);
    Notify_DoNotifyProgress(pos, total);
  end;
end;

// 初始化
procedure InitializeWizard();
var
  winW:integer;
  winH:integer;
  i:integer;
begin
  DpiScalePctg := WizardForm.Font.PixelsPerInch / 96;

  winW:=DpiScale(640);
  winH:=DpiScale(320);

  WizardForm.InnerNotebook.Hide;
  WizardForm.OuterNotebook.hide;
  WizardForm.BorderStyle:=bsNone;
  WizardForm.Position:=poDesktopCenter;
  
  WizardForm.Width:=winW;
  WizardForm.Height:=winH;
  WizardForm.Color:=$ebebeb;

  // WizardForm.Bevel.Hide;
  WizardForm.NextButton.Width:=0;
  WizardForm.BackButton.Width:=0;
  WizardForm.CancelButton.Width:=0;

  Misc_SetFormRoundRectRgn(WizardForm, DpiScale(16));//圆角
  Misc_SetForm_Dragable(WizardForm);
  
  dNeedSpaceByte := {#MyAppNeedSpaceByte}

  // 将tmp的资源， 解压到 安装运行时 搞出来的临时目录
  ExtractTemporaryFile('k1Btn.png');
  ExtractTemporaryFile('k2Btn.png');
  ExtractTemporaryFile('BrowseBtn.png');
  ExtractTemporaryFile('BigIcon.png');
  ExtractTemporaryFile('InstallBtn.png');
  ExtractTemporaryFile('FinishBtn.png');
  ExtractTemporaryFile('progress.png');

  // 软件名
  lblSoftwareName := TLabel.Create(WizardForm);
  with lblSoftwareName do begin
    Parent := WizardForm;
    Caption := 'FFBox 安装向导';
    Transparent := true;
    Font.Size := 9;
    Font.Name := '微软雅黑'
    Font.Color := $666666;
    Left:= DpiScale(16);
    Top := DpiScale(8);
  end;

  // 大 logo
  imgBigIcon := ImgLoad(WizardForm.Handle,ExpandConstant('{tmp}\BigIcon.png'),DpiScale(245),DpiScale(24),DpiScale(150),DpiScale(150),True,False);
  // ImgSetVisibility(imgBigIcon,true);

  // 金刚键
  btnClose:= BtnCreate(WizardForm.Handle, DpiScale(640-44), DpiScale(0), DpiScale(44),DpiScale(30), ExpandConstant('{tmp}\k2Btn.png'),1,False)
  BtnSetEvent(btnClose,BtnClickEventID,WrapBtnCallback(@BtnClose_OnClick,1));
  btnMin:=BtnCreate(WizardForm.Handle,DpiScale(640-88),DpiScale(0),DpiScale(44),DpiScale(30),ExpandConstant('{tmp}\k1Btn.png'),1,False)
  BtnSetEvent(btnMin,BtnClickEventID,WrapBtnCallback(@btnMin_OnClick,1));

  // 使用许可和条款
  lblLicense := TLabel.Create(WizardForm);
  with lblLicense do begin
    Parent := WizardForm;
    Caption := '使用许可和条款（必读）';
    Transparent := true;
    Font.Size:= 10;
    Font.Name := '微软雅黑';
    Font.Color := $666666;
    Left := DpiScale(24);
    Top := DpiScale(292);
    OnClick:=@lblLicenseClick;
    Cursor := crHand;
  end;

  // 版本
  lblVersion := TLabel.Create(WizardForm);
  with lblVersion do begin
    Parent := WizardForm;
    Caption := '版本：{#MyAppVersion}';
    Alignment := taRightJustify;
    Transparent := true;
    Font.Size:= 10;
    Font.Name := '微软雅黑';
    Font.Color := $666666;
    Left:= DpiScale(640-24-60);
    Top := DpiScale(292);
    Width := DpiScale(60);
    OnClick := @lblVersionClick;
    Cursor := crHand;
  end;
  HoverEvent_Init(@OnHoverControlChanged);

  InitGui_PageWelcome();
  // InitGui_PageSelectDir();
  InitGui_PageInstall();
  InitGui_PageFinish();
  
  PBOldProc:=SetWindowLong(WizardForm.ProgressGauge.Handle,-4,PBCallBack(@PBProc,4));
  
  ImgApplyChanges(WizardForm.Handle);
  
  CurPageChanged(WizardForm.CurPageID);
end;

// 页面指定
function ShouldSkipPage(PageID: Integer): Boolean; begin
  case PageID of
    wpWelcome:             result:=false; 
    wpLicense:             result:=true;  
    wpPassword:            result:=true;  
    wpInfoBefore:          result:=true;  
    wpUserInfo:            result:=true;  
    wpSelectDir:           result:=true;  
    wpSelectComponents:    result:=true;  
    wpSelectProgramGroup:  result:=true;  
    wpSelectTasks:         result:=true;  
    wpReady:               result:=true;  
    wpPreparing:           result:=true;  
    wpInstalling:          result:=false; 
    wpInfoAfter:           result:=true;  
    wpFinished:            result:=false; 
  else  result := true;
  end;
end;

procedure DeinitializeSetup(); begin
  gdipShutdown; // botva2
  if PBOldProc<>0 then SetWindowLong(WizardForm.ProgressGauge.Handle,-4,PBOldProc);
end;
