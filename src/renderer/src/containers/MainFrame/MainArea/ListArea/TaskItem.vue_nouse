<script lang="tsx" setup>
import { computed, defineComponent, FunctionalComponent, onBeforeUnmount, ref, Transition, VNodeRef, watch, onUnmounted } from 'vue'; // defineComponent 的主要功能是提供类型检查
import { TaskStatus, TransferStatus } from '@common/types';
import { UITask } from '@renderer/types'
import { generator as vGenerator } from '@common/params/vcodecs';
import { generator as aGenerator } from '@common/params/acodecs';
import { useAppStore } from '@renderer/stores/appStore';
import Tooltip from '@renderer/components/Tooltip/Tooltip';
import nodeBridge from '@renderer/bridges/nodeBridge';
import { stringifyTimeValue } from '@common/utils';
import { getOutputDuration } from '@renderer/common/dashboardCalc';
import IconPreview from '@renderer/assets/video.svg';
import IconRightArrow from '@renderer/assets/mainArea/swap_right.svg';
import style from './TaskItem.module.less';

const appStore = useAppStore();
const settings = appStore.taskViewSettings;

interface Props {
	task: UITask;
	id: number;
	selected?: boolean;
	onClick?: (event: MouseEvent) => any;
	onDblClick?: (event: MouseEvent) => any;
	onPauseOrRemove?: () => any;
}
const props = defineProps<Props>();
const { task } = props;


// #region 预先计算以减少下方计算量

const outputDuration = computed(() => {
    console.log('comp');
    return getOutputDuration(task);
});

// #endregion

// #region 参数

const beforeBitrateFilter = (kbps: number) => {
    if (isNaN(kbps)) {
        return '读取中';
    } else {
        const bps = kbps * 1000;
        if (window.frontendSettings.useIEC) {
            if (bps >= 10 * 1024 ** 2) {
                return (bps / 1024 ** 2).toFixed(1) + ' Mibps';
            } else {
                return (bps / 1024).toFixed(0) + ' kibps';
            }
        } else {
            if (bps >= 10 * 1000 ** 2) {
                return (bps / 1000 ** 2).toFixed(1) + ' Mbps';
            } else {
                return (bps / 1000).toFixed(0) + ' kbps';
            }
        }
    }
};
const durationBefore = computed(() => stringifyTimeValue(task.before.duration));
const durationAfter = computed(() => stringifyTimeValue(outputDuration.value));
const smpteBefore = computed(() => task.before.vresolution && task.before.vframerate ? `${task.before.vresolution.replace('<br />', '×')}@${task.before.vframerate}` : '-');
const videoRateControlValue = computed(() => vGenerator.getRateControlParam(task.after.video).value);
const audioRateControlValue = computed(() => aGenerator.getRateControlParam(task.after.audio).value);
const videoRateControl = computed(() => (videoRateControlValue.value === '-' ? '' : `@${task.after.video.ratecontrol} ${videoRateControlValue.value}`));
const audioRateControl = computed(() => (audioRateControlValue.value === '-' ? '' : `@${task.after.audio.ratecontrol} ${audioRateControlValue.value}`));
const videoInputBitrate = computed(() => task.before.vbitrate > 0 ? `@${beforeBitrateFilter(task.before.vbitrate)}` : '');
const audioInputBitrate = computed(() => task.before.abitrate > 0 ? `@${beforeBitrateFilter(task.before.abitrate)}` : '');

// #endregion

// #region 仪表盘

const graphBitrateFilter = (kbps: number) => {
    const bps = kbps * 1000;
    if (window.frontendSettings.useIEC) {
        if (bps >= 10 * 1024 ** 2) {
            return (bps / 1024 ** 2).toFixed(1) + ' M';
        } else {
            return (bps / 1024 ** 2).toFixed(2) + ' M';
        }
    } else {
        if (bps >= 10 * 1000 ** 2) {
            return (bps / 1000 ** 2).toFixed(1) + ' M';
        } else {
            return (bps / 1000 ** 2).toFixed(2) + ' M';
        }
    }
};
const graphBitrate = computed(() => graphBitrateFilter(task.dashboard_smooth.bitrate));
const speedFilter = (value: number) => {
    if (value < 10) {
        return value.toFixed(2) + ' ×';
    } else {
        return value.toFixed(1) + ' ×';
    }
};
const graphSpeed = computed(() => speedFilter(task.dashboard_smooth.speed));
const timeFilter = (value: number) => {
    let left = value;
    let hour = Math.floor(left / 3600); left -= hour * 3600;
    let minute = Math.floor(left / 60); left -= minute * 60;
    let second = left;
    if (hour) {
        return `${hour}:${minute.toString().padStart(2, '0')}:${second.toFixed(0).toString().padStart(2, '0')}`;
    } else if (minute) {
        return `${minute}:${second.toFixed(1).padStart(4, '0')}`;
    } else {
        return second.toFixed(2);
    }
};
const graphTime = computed(() => timeFilter(task.dashboard_smooth.time));
const graphLeftTime = computed(() => {
    const totalDuration = outputDuration.value;
    const needTime = totalDuration / task.dashboard_smooth.speed;
    const remainTime = (totalDuration - task.dashboard_smooth.time) / totalDuration * needTime;	// 剩余进度比例 * 全进度耗时
    return timeFilter(remainTime);
});
const graphSizeFilter = (kB: number) => {
    const B = kB * 1000;
    if (window.frontendSettings.useIEC) {
        if (B >= 10 * 1024 ** 3) {
            return (B / 1024 ** 3).toFixed(1) + ' GiB';
        } else if (B >= 1024 ** 3) {
            return (B / 1024 ** 3).toFixed(2) + ' GiB';
        } else if (B >= 100 * 1024 ** 2) {
            return (B / 1024 ** 2).toFixed(0) + ' MiB';
        } else if (B >= 10 * 1024 ** 2) {
            return (B / 1024 ** 2).toFixed(1) + ' MiB';
        } else {
            return (B / 1024 ** 2).toFixed(2) + ' MiB';
        }
    } else {
        if (B >= 10 * 1000 ** 3) {
            return (B / 1000 ** 3).toFixed(1) + ' GB';
        } else if (B >= 1000 ** 3) {
            return (B / 1000 ** 3).toFixed(2) + ' GB';
        } else if (B >= 100 * 1000 ** 2) {
            return (B / 1000 ** 2).toFixed(0) + ' MB';
        } else if (B >= 10 * 1000 ** 2) {
            return (B / 1000 ** 2).toFixed(1) + ' MB';
        } else {
            return (B / 1000 ** 2).toFixed(2) + ' MB';
        }
    }
};
const graphSize = computed(() => graphSizeFilter(task.dashboard_smooth.size));
const transferSpeedFilter = (kBps: number) => {
    const Bps = kBps * 1000;
    if (window.frontendSettings.useIEC) {
        if (Bps >= 100 * 1024 ** 2) {
            return (Bps / 1024 ** 2).toFixed(0) + ' MiB';
        } else if (Bps >= 10 * 1024 ** 2) {
            return (Bps / 1024 ** 2).toFixed(1) + ' MiB';
        } else if (Bps >= 1024 ** 2) {
            return (Bps / 1024 ** 2).toFixed(2) + ' MiB';
        } else {
            return (Bps / 1024).toFixed(0) + ' KiB';
        }
    } else {
        if (Bps >= 100 * 1000 ** 2) {
            return (Bps / 1000 ** 2).toFixed(0) + ' MB';
        } else if (Bps >= 10 * 1000 ** 2) {
            return (Bps / 1000 ** 2).toFixed(1) + ' MB';
        } else if (Bps >= 1000 ** 2) {
            return (Bps / 1000 ** 2).toFixed(2) + ' MB';
        } else {
            return (Bps / 1000).toFixed(0) + ' KB';
        }
    }
};
const graphTransferSpeed = computed(() => transferSpeedFilter(task.dashboard_smooth.transferSpeed));
const graphTransferred = computed(() => graphSizeFilter(task.dashboard_smooth.transferred / 1000));

// 圆环 style 部分
// 计算方式：(log(数值) / log(底，即每增长多少倍数为一格) + 数值为 1 时偏移多少格) / 格数
// 　　　或：(log(数值 / 想要以多少作为最低值) / log(底，即每增长多少倍数为一格)) / 格数
const graphBitrateStyle = computed(() => {
    let value = Math.log(task.dashboard_smooth.bitrate / 62.5) / Math.log(8) / 4;		// 62.5K, 500K, 4M, 32M, 256M
    value = Math.min(Math.max(value, 0), 1);
    return `background: conic-gradient(var(--primaryColor) 0%, var(--primaryColor) ${value * 75}%, hwb(var(--opposite80) / 0.1) ${value * 75}%, hwb(var(--opposite80) / 0.1) 75%, transparent 75%)`;
});
const graphSpeedStyle = computed(() => {
    let value = Math.log(task.dashboard_smooth.speed / 0.04) / Math.log(5) / 6;			// 0.04, 0.2, 1, 5, 25, 125, 625
    value = Math.min(Math.max(value, 0), 1);
    return `background: conic-gradient(var(--primaryColor) 0%, var(--primaryColor) ${value * 75}%, hwb(var(--opposite80) / 0.1) ${value * 75}%, hwb(var(--opposite80) / 0.1) 75%, transparent 75%)`;
});
const graphTransferSpeedStyle = computed(() => {
    let value = Math.log(task.dashboard_smooth.transferSpeed / 62.5) / Math.log(10) / 4;	// 62.5K, 500K, 4M, 32M, 256M, 512M, 1024M
    value = Math.min(Math.max(value, 0), 1);
    return `background: conic-gradient(var(--primaryColor) 0%, var(--primaryColor) ${value * 75}%, hwb(var(--opposite80) / 0.1) ${value * 75}%, hwb(var(--opposite80) / 0.1) 75%, transparent 75%)`;
});
// 线性 style 部分
const graphTimeStyle = computed(() => {
    const valueOdd = Math.min(task.dashboard_smooth.time % 2, 1);
    const valueEven = Math.max(task.dashboard_smooth.time % 2 - 1, 0);
    return `background: linear-gradient(to right, hwb(var(--opposite80) / 0.1) 0%, hwb(var(--opposite80) / 0.1) ${valueEven * 100}%, var(--primaryColor) ${valueEven * 100}%, var(--primaryColor) ${valueOdd * 100}%, hwb(var(--opposite80) / 0.1) ${valueOdd * 100}%, hwb(var(--opposite80) / 0.1) 100%, transparent 100%)`;
});
const graphFrameStyle = computed(() => {
    const valueOdd = Math.min(task.dashboard_smooth.frame % 2, 1);
    const valueEven = Math.max(task.dashboard_smooth.frame % 2 - 1, 0);
    return `background: linear-gradient(to right, hwb(var(--opposite80) / 0.1) 0%, hwb(var(--opposite80) / 0.1) ${valueEven * 100}%, var(--primaryColor) ${valueEven * 100}%, var(--primaryColor) ${valueOdd * 100}%, hwb(var(--opposite80) / 0.1) ${valueOdd * 100}%, hwb(var(--opposite80) / 0.1) 100%, transparent 100%)`;
});

const overallProgress = computed(() => task.transferStatus === 'normal' ? task.dashboard_smooth.progress : task.dashboard_smooth.transferred / task.transferProgressLog.total);
// const overallProgress = { value: 0.99 };
const overallProgressDescription = computed(() => task.transferStatus === 'normal' ? '转码进度' : '上传进度');

// #endregion

// #region 其他样式

const showDashboard = computed(() => [TaskStatus.TASK_RUNNING, TaskStatus.TASK_PAUSED, TaskStatus.TASK_STOPPING].includes(task.status) || task.transferStatus !== TransferStatus.normal);
const dashboardType = computed(() => showDashboard ? (task.transferStatus !== TransferStatus.normal ? 'transfer' : 'convert') : 'none');

const taskNameWidth = computed(() => {
    let shrinkSpace = 80;
    shrinkSpace += [0, 13 + 96, 13 + 96 + 14 + 120 ][['none', 'input', 'all'].indexOf(settings.paramsVisibility.audio)];
    shrinkSpace += [0, 13 + 96, 13 + 96 + 14 + 120 ][['none', 'input', 'all'].indexOf(settings.paramsVisibility.video)];
    shrinkSpace += [0, 13 + 88, 13 + 88 + 14 + 88 ][['none', 'input', 'all'].indexOf(settings.paramsVisibility.smpte)];
    shrinkSpace += [0, 13 + 36, 13 + 36 + 14 + 36 ][['none', 'input', 'all'].indexOf(settings.paramsVisibility.format)];
    shrinkSpace += [0, 13 + 64, 13 + 64 + 14 + 64 ][['none', 'input', 'all'].indexOf(settings.paramsVisibility.duration)];
    if (showDashboard.value) {
        shrinkSpace = Math.max(shrinkSpace, 784);
    }
    return `max(calc(100% - ${shrinkSpace}px), 64px)`;
});

const deleteButtonBackgroundPositionX = computed(() => {
    switch (task.status) {
        case TaskStatus.TASK_STOPPED:
            return '0px';	// 删除按钮
        case TaskStatus.TASK_RUNNING:
            return '-100%';	// 暂停按钮
        case TaskStatus.TASK_PAUSED: case TaskStatus.TASK_STOPPING: case TaskStatus.TASK_FINISHING: case TaskStatus.TASK_FINISHED: case TaskStatus.TASK_ERROR:
            return '-200%';	// 重置按钮
    }
    return '';
});

// 整个任务项的高度，包括上下 margin
const taskHeight = computed(() => {
    let height = 4;
    height += settings.showParams ? 24 : 0;
    height += showDashboard.value ? 72 : 0;
    height += settings.showCmd ? 64 : 0;
    height = Math.max(24, height);
    return height;
});

const taskBackgroundStyle = computed(() => {
    if (props.selected) {
        return {
            background: 'hwb(var(--menuItemHovered))',
            border: 'hwb(var(--menuItemSelected)) 1px solid',
        };
    } else {
        return {};
    }
});

const taskBackgroundProgressStyle = computed(() => ({
    width: (task.transferStatus === 'normal' ? task.dashboard_smooth.progress : task.dashboard_smooth.transferred / task.transferProgressLog.total) * 100 + '%' }
));

// #endregion

const cmdRef = ref<VNodeRef>(null);
const cmdText = computed(() => settings.cmdDisplay === 'input' ? ['ffmpeg', ...task.paraArray].join(' ') : task.cmdData);
// watch(() => task.cmdData, () => {
// 	console.log('变化');
// 	const elem = cmdRef.value as Element;
// 	if (elem) {
// 		const scrollBottom = elem?.scrollTop + elem.getBoundingClientRect().height;
// 		if (elem.scrollHeight - scrollBottom < 1) {
// 			console.log('到底');
// 			setTimeout(() => {
// 				elem.scrollTo(0, Number.MAX_SAFE_INTEGER);
// 			}, 0);
// 		}
// 	}
// });
// console.log('props', props);

// 监听窗口宽度变化
// const windowWidth = ref(0);
// const windowWidthListener = ref<() => void>(() => {
// 	console.log('宽度变化', window.innerWidth);
// 	windowWidth.value = window.innerWidth;
// });
// watch(() => windowWidthListener.value, () => {
// 	console.log('ref 变化');
// })

const handleMouseEnter = (event: MouseEvent) => {
    if (task.status === TaskStatus.TASK_FINISHED) {
        Tooltip.show({
            content: `双击以${appStore.currentServer.entity.ip === 'localhost' ? '打开' : '下载'}输出文件`,
            style: {
                right: `calc(100vw - ${event.pageX}px)`,
                top: `${event.pageY}px`,
            },
        })
    }
};

const handleTaskDblClicked = (event: MouseEvent) => {
    const serverName = appStore.currentServer.data.name;
    const bridge = appStore.currentServer.entity;
    if (task.status === TaskStatus.TASK_FINISHED && task.transferStatus === TransferStatus.normal) {
        if (appStore.currentServer.entity.ip === 'localhost') {
            nodeBridge.openFile(`"${task.outputFile}"`);
        } else {
            const url = `http://${bridge.ip}:${bridge.port}/download/${task.outputFile}`;
            if (nodeBridge.env === 'electron') {
                nodeBridge.ipcRenderer?.send('downloadFile', { url, serverName, taskId: props.id });
                appStore.downloadMap.set(url, { serverId: appStore.currentServer.data.id, taskId: props.id });
            } else {
                const elem = document.createElement('a');
                elem.href = url;
                elem.click();
            }
        }
        Tooltip.hide();
    }
};

const render = () => (
    <div>
        <div>
        </div>
    </div>
);

</script>

<template>

</template>